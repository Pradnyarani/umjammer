#summary Java Reverse Engineering

= Tools =

  * jad
   * 長所
    * 今のところ最強
   * 短所
    * Exception 周りが下手、finally は絶望的
    * switch もダメダメ
    * for, while の扱いが逆なんじゃない？
    * inner class もちょっとおかしい
    * synchronize もダメ

  * JD
   * 長所
    * Exception はまあまあ
   * 短所
    * いまいち信用出来ない
     * JAD はうまく行かなかったところに byte code っぽいものを残すのだが、JD は適当にエラーのないコードを出力してるような

 jad で最初でコンパイルしておかしいところを JD で補完していくのがいいと思う

= How To =

 面倒になるのが同じ文字で大文字、小文字のクラス名に難読化されている場合、ファイルシステムが対応してないとか、Eclipse が判別してくれないとかあるのでそれを解除する。

 あとメソッドのオーバーロードのバインディングミスも発見しづらいので最初に回避するようにしておく

== Anti Obfuscation ==

 難読化を解除するために難読化ツールを使用する。

 * ProGuard
  * method overload を積極的にしているのを解除する (-useuniqueclassmembernames)
  * クラス名に同じ文字の大文字、小文字を許容するも解除 (-dontusemixedcaseclassnames)

{{{
-dontshrink
-dontoptimize
-useuniqueclassmembernames
-dontpreverify
-keepparameternames
-renamesourcefileattribute SourceFile
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
                SourceFile,LineNumberTable,*Annotation*,EnclosingMethod

-keeppackagenames your.packages.**

-keepnames class your.packages.**
}}}

== Decompile ==

 * jad
  * オーバーロードのバインドミスを無くすために -safe オプションを付ける
{{{
 $ find . -name \*.class -exec jad -s .java -safe -space -r -nonlb -ff {} \;
}}}

== Hand Completion ==