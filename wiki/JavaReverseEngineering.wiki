#summary Java Reverse Engineering

= Tools =

  * [http://www.varaneckas.com/jad jad]
   * 長所
    * 今のところ最強
   * 短所
    * Exception 周りが下手、finally は絶望的
    * switch もダメダメ
    * for, while の扱いが逆なんじゃない？
    * inner class もちょっとおかしい
    * synchronize もダメ
    * 開発終了？

  * [http://java.decompiler.free.fr/ JD]
   * 長所
    * Exception はまあまあ
    * switch もまあまあ
     * break が抜けてる気がするのだが
    * 開発中
   * 短所
    * いまいち信用出来ない
     * jad はうまく行かなかったところに byte code っぽいものを残すのだが、JD は適当にエラーのないコードを出力してるような
    * CUI がない

 jad で最初逆コンパイルしておかしいところを JD で補完していくのがいいと思う

= How To =

 面倒になるのが同じ文字で大文字、小文字のクラス名に難読化されている場合、ファイルシステムが対応してないとか、Eclipse が判別してくれないとかあるのでそれを解除する。

 あとメソッドのオーバーロードのバインディングミスも発見しづらいので最初に回避するようにしておく

== Anti Obfuscation ==

 難読化を解除するために難読化ツールを使用する。

 * [http://proguard.sourceforge.net/ ProGuard]
  * method overload を積極的にしているのを解除する (-useuniqueclassmembernames)
  * クラス名に同じ文字の大文字、小文字を許容するも解除 (-dontusemixedcaseclassnames)

{{{
-dontshrink
-dontoptimize
-useuniqueclassmembernames
-dontpreverify
-keepparameternames
-renamesourcefileattribute SourceFile
-keepattributes Exceptions,InnerClasses,Signature,Deprecated,
                SourceFile,LineNumberTable,*Annotation*,EnclosingMethod

-keeppackagenames your.packages.**

-keepnames class your.packages.**
}}}

== Decompile ==

 * jad
  * オーバーロードのバインドミスを無くすために -safe オプションを付ける
{{{
 $ find . -name \*.class -exec jad -s .java -safe -space -r -nonlb -ff {} \;
}}}

== Hand Completion ==

=== for ===

 * パターンでわかる

=== exception ===

 * 何となく分かる、try がどこに入るのかがいまいちよくわからない

=== finally ===

 * exception 処理っぽいところで同じコードが何回も出てきたらそれは finally 節

=== switch ===

 * 人力ではキツイので JD に頼る

=== synchronized ===

 * パターンでわかる

=== inner class ===

 * コンストラクタで super の場所が間違ってるので直す。
 * 親クラス参照を消す
 * コンパイラが作成したと思われる static メソッドをインライン化する

=== class ===

 * 表記が変なので直す

=== String ===

 * StringBuilder、StringBuffer を消す

{{{
  System.err.println((new StringBuilder("value: ")).append(value).toString());
}}}

{{{
  System.err.println("value: " + value);
}}}

=== local variables created by compiler ===

 * 見やすくしたり、消したり
 * while の条件式中のやつは注意

=== double literal ===

 * 人が書いた数値に戻す

{{{
    double d1 = 0.29999999999999999D;
}}}

{{{
    double d1 = 0.3d;
}}}